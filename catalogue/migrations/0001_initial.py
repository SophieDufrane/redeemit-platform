# Generated by Django 4.2.17 on 2025-03-09 17:25

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when the cart was created.",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when the cart was updated.",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user associated with this cart.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CatalogueItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reward_name",
                    models.CharField(
                        help_text="The name of the reward must be unique.",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=200, unique=True)),
                (
                    "points_cost",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of points required to redeem this reward.",
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the reward."),
                ),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        default="placeholder",
                        help_text="The image of the reward.",
                        max_length=255,
                        verbose_name="image",
                    ),
                ),
                (
                    "image_description",
                    models.CharField(
                        default="Image description not provided",
                        help_text="Provide an image description for accessibility purposes.",
                        max_length=255,
                    ),
                ),
                (
                    "stock_quantity",
                    models.IntegerField(
                        default=0, help_text="The current stock quantity of the reward."
                    ),
                ),
                (
                    "reward_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="The points value of the reward.",
                        max_digits=6,
                    ),
                ),
                (
                    "reward_terms_and_conditions",
                    models.TextField(
                        default="Terms & Conditions",
                        help_text="Terms and conditions for redeeming this reward.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Redemption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "redeemed_on",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date and time of redemption."
                    ),
                ),
                (
                    "total_points_spent",
                    models.PositiveIntegerField(
                        help_text="Total points used for this redemption."
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the redemption.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RedemptionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="The quantity of this item redeemed."
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="The item that was redeemed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="catalogue.catalogueitem",
                    ),
                ),
                (
                    "redemption",
                    models.ForeignKey(
                        help_text="The redemption transaction this item is part of.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="catalogue.redemption",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="The quantity of this item in the cart."
                    ),
                ),
                (
                    "added_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this item was added to the cart.",
                    ),
                ),
                (
                    "cart",
                    models.ForeignKey(
                        help_text="The cart that this item belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="catalogue.cart",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="The item that was added to the cart.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="catalogue.catalogueitem",
                    ),
                ),
            ],
        ),
    ]
